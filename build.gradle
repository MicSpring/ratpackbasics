buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath ("io.ratpack:ratpack-gradle:1.4.2")
        classpath 'com.h2database:h2:1.4.192'
        classpath 'org.jooq:jooq-codegen:3.8.5'
    }
}

group 'com.ratpack'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'io.ratpack.ratpack-groovy'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile ratpack.dependency('hikari')
    compile 'com.h2database:h2:1.4.192'
    compile 'org.jooq:jooq-codegen:3.8.5'


    compile(
            'org.slf4j:slf4j-api:1.7.21',
            'ch.qos.logback:logback-core:1.1.7',
            'ch.qos.logback:logback-classic:1.1.7',
            'ch.qos.logback:logback-access:1.1.7'
    )

}

war {
    archiveName 'RPBasics.war'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}


test {
    testLogging {

        showStandardStreams = true

        // Or set property events:
        //events 'standard_out', 'standard_error'

        // events = ['standard_out', 'standard_error']
        // events = ['standard_out', 'standard_error']

        // Instead of string values we can
        // use enum values:

        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //  org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

import org.jooq.util.*
import org.jooq.util.jaxb.*;

task jooqCodegen {
    doLast {
        String initDDL = "$projectDir/src/main/resources/scripts/ddl.sql".replace('\\\\','/').replace('\\','/')
        String initDML = "$projectDir/src/main/resources/scripts/dml.sql".replace('\\\\','/').replace('\\','/')
        println "DDL location: $initDDL \n DML Location: $initDML"

        Configuration configuration = new Configuration()
                .withJdbc(
                    new Jdbc()
                    .withDriver("org.h2.Driver")
                    .withUrl("jdbc:h2:mem:indb;INIT=RUNSCRIPT FROM '$initDDL'\\;RUNSCRIPT FROM '$initDML'")
        )
                .withGenerator(
                    new org.jooq.util.jaxb.Generator().withDatabase(new org.jooq.util.jaxb.Database()
                    .withName("org.jooq.util.h2.H2Database")
                    .withIncludes(".*")
                    .withExcludes("")
                    .withInputSchema("PUBLIC")
            )
                .withTarget(new Target()
                .withDirectory("$projectDir/src/main/java")
                .withPackageName("jooq.autogen.db"))
        )

        GenerationTool.generate(configuration)
    }
}